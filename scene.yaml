# Author @patriciogv - 2016

import:
    - http://tangrams.github.io/blocks/global.yaml
    - http://tangrams.github.io/blocks/functions/map.yaml
    - http://tangrams.github.io/blocks/functions/zoom.yaml
    - http://tangrams.github.io/blocks/functions/aastep.yaml
    - http://tangrams.github.io/blocks/geometry/matrices.yaml
    - http://tangrams.github.io/blocks/patterns/grid.yaml
    - http://tangrams.github.io/blocks/shapes/cross.yaml
    - https://tangrams.github.io/blocks/elevation/stripes.yaml
    - https://tangrams.github.io/blocks/elevation/normal.yaml
    - https://tangrams.github.io/blocks/lines/dots.yaml

sources:
    mapzen:
        type: TopoJSON
        url: https://tile.mapzen.com/mapzen/vector/v1/all/{z}/{x}/{y}.topojson?api_key=mapzen-YoRQaZF
        rasters: [normals-elevation]
        max_zoom: 16
    normals-elevation:
        type: Raster
        url: https://tile.mapzen.com/mapzen/terrain/v1/normal/{z}/{x}/{y}.png?api_key=mapzen-YoRQaZF
        max_zoom: 15

scene:
    background:
        color: #AFB1B1

cameras:
    perspective:
        type: perspective

layers:
    earth:
        data: { source: mapzen }
        draw:
            earth:
                order: global.order
                color: [0.293, 0.300, 0.297]
    water:
        data: { source: mapzen }
        draw:
            water:
                order: global.order
                color: [0.688, 0.695, 0.695]
    landuse:
        data: { source: mapzen }
        draw:
            landuse:
                order: global.order
                color: [0.443, 0.434, 0.434]
    roads:
        data: { source: mapzen }
        filter: { $zoom: {min: 7}, not: { kind: [rail, ferry] } }
        draw:
            lines:
                order: global.order
                color: [0.988, 0.929, 0.970]
                width: [[7,0.0px], [10, .5px], [15, .75px], [17, 5m]]
        highway:
            filter: { kind: highway }
            draw:
                lines:
                    order: global.order
                    color: [0.680, 0.244, 0.432]
                    width: [[8,0px], [8,.25px], [11, 1.5px], [14, 2px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: true } # on- and off-ramps, etc
                draw:
                    lines:
                        color: [0.625, 0.534, 0.650]
                        width: [[8,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: true, $zoom: {min: 13} }
                    draw:
                        lines:
                            color: [0.369, 0.203, 0.272]
        tunnel:
            filter: {is_tunnel: true }
            draw:
                lines:
                    order: global.order
                    color: [0.286, 0.322, 0.325]
        airport-lines:
            filter: { kind: minor_road, aeroway: [runway,taxiway] }
            draw:
                lines:
                    color: [0.696, 0.955, 0.946]
                    width: [[10, 2px], [11, 2.5px], [12, 3px], [13, 4px], [14, 8px], [15, 16px], [16, 32px], [17, 60m]]
                    outline:
                        color: [1.0,1.0,1.0]
            # Features come in at zoom 9, but include mostly minor airports without POIs until z13
            early:
                filter: { $zoom: { max: 12 }, not: { landuse_kind: [aerodrome, runway, taxiway] } }
                draw:
                    lines:
                        visible: false
            not-round:
                filter: { $zoom: { min: 17 } }
                draw:
                    lines:
                        cap: butt
            taxiway:
                filter: { aeroway: taxiway }
                draw:
                    lines:
                        color: [[14, [0.75,0.75,0.75]], [15, [0.6,0.6,0.6]], [16, [0.3,0.3,0.3]], [17, [0.0,0.0,0.0]]]
                        width: [[14, 1px], [17, 1.5px], [18, 4m]]
                        outline:
                            width: 0.5px
                            color: [1.0,1.0,1.0]
                early:
                    filter: { $zoom: { max: 13 } }
                    draw:
                        lines:
                            visible: false
    station:
        data: { source: stations }
        draw:
            wind:
                blend: overlay
                blend_order: 1
                size: function() { return 20. + Math.pow(feature.w_speed, 0.5) * 20.; }
                color: |
                    function() {
                        return [ 127+parseFloat(feature.temp), feature.humidity, (feature.w_deg/360)*255 ];
                    }
            text:
                # Print the temperature (°C) instad of the actual name of the station 
                text_source: |
                    function() {
                        return feature.temp + '°';
                    }
                # Suspend label collitions and repetition checking
                collide: false
                repeat_distance: 0px
                # Show over all
                blend: overlay
                blend_order: 0
                offset: [0,-30px]
                font:
                    size: 20px
                    fill: black
                    stroke: { color: white, width: 5 }
styles:
    water:
        base: polygons
        mix: [patterns-grid]
        shaders:
            blocks:
                color: |
                    color.rgb += tileGrid()*0.4;
    earth:
        base: polygons
        mix: [elevation-normal]

    landuse:
        base: polygons
        mix: [functions-zoom, elevation-stripes]
        shaders:
            defines:
                ZOOM_START: 0.
                ZOOM_END: 13.
                STRIPES_ALPHA: .5
                STRIPES_SCALE: 70.
                STRIPES_DIR: vec3(-0.600,-0.420,0.560)
                STRIPES_PCT: 1.8
                STRIPES_WIDTH: mix( (1.-zoom()),
                                    dot((sampleRaster(int(NORMAL_TEXTURE_INDEX)).rgb-.5)*2.,
                                        STRIPES_DIR),
                                    zoom())*STRIPES_PCT
    wind:
        base: points
        texcoords: true
        animated: true
        mix: [functions-aastep, geometry-matrices]
        shaders: 
            blocks: 
                global: |
                    float shape(vec2 st, int N){
                        st = st *2.-1.;
                        float a = atan(st.x,st.y)+PI;
                        float r = TWO_PI/float(N);
                        return cos(floor(.5+a/r)*r-a)*length(st);
                    }
                color: |
                    float temp = .5+color.r*.5;
                    float humidity = color.g;
                    float w_deg = color.b*PI;

                    // Ignore wind blowing at 0.0 degrees. Probably is an error
                    if (w_deg != 0.0) {
                        vec2 st = v_texcoord.xy;
                        st -= .5;
                        st = rotate2D(w_deg)* st;
                        st *= .62;
                        st += .5;
                        float d = min(shape(st*vec2(1.5,1.)+vec2(-0.250,-0.07),3),shape(st*vec2(2.,1.)+vec2(-0.500,0.100),4));
                        color = mix(vec4(1.,0.,0.,1.),vec4(0.,0.,1.,1.),temp*4.-2.5)*vec4(1.0-step(.2,d));
                    } else {
                        color.a = 0.0;
                    }
